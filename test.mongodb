// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('czo');

query = new Object();
query.term = "Soil";
//query.limit = 300;

query.publishedStart = 2021
query.publishedEnd = 2022

//query.dataCoverageStart = 2010
//query.dataCoverageEnd = 2019

//query.creatorName = 'Anderson'

//query.providerName = "EarthChem Library"
query.providerName = "HydroShare"

const pageSize = query.pageSize || 30;
const pageNumber = query.pageNumber || 1;

const should = [];
if ('term' in query) {
  should.push({
    'text': {
      'query': query.term, 
      'path': [
        'name', 'description', 'keywords'
      ], 
      'fuzzy': { 'maxEdits': 1 }
    }
  });
}

const filters = [];
if ('publishedStart' in query) {
  filters.push({
    'range': {
      'path': 'datePublished',
      'gte': new Date(query.publishedStart.toString()),
      'lt': new Date((query.publishedEnd + 1).toString()) // +1 to include all of the publishedEnd year
    },
  });
}

if ('dataCoverageStart' in query) {
  filters.push({
    'range': {
      'path': 'temporalCoverage.start',
      'gte': new Date(query.dataCoverageStart.toString())
    },
  });
}


if ('dataCoverageEnd' in query) {
  filters.push({
    'range': {
      'path': 'temporalCoverage.end',
      'lt': new Date((query.dataCoverageEnd + 1).toString()) // +1 to include all of the publishedEnd year
    },
  });
}

const must = [];

if ('creatorName' in query) {
  must.push({
    'text': {
      'path': 'creator.@list.name',
      'query': query.creatorName
    }
  });
}

if ('providerName' in query) {
  must.push({
    'text': {
      'path': 'provider.name',
      'query': query.providerName
    }
  });
}

if ('contentType' in query) {
  must.push({
    'text': {
      'path': '@type',
      'query': query.contentType
    }
  });
}

const stages = []

stages.push(
  {
    '$search': {
      'index': 'fuzzy_search',
      'compound': {
        'filter': filters,
        'should': should,
        'must': must
      },
      'highlight': { 'path': ['name', 'description', 'keywords'] }
    }
  }
)

// Sort needs to happen before pagination
if ('sortBy' in query) {
  stages.push({
  '$sort': { 
      [query.sortBy]: 1
    }
  })
}

stages.push(
  {
    '$skip': (+pageNumber - 1) * +pageSize
  },
  {
    '$limit': +pageSize
  },
  { 
    '$set': {
      'score': { '$meta': 'searchScore' },
      'highlights': { '$meta': 'searchHighlights' }
    } 
  },
)

const result = await records.aggregate(stages).toArray();

//return result;
result;