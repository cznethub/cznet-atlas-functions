// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('czo');

query = new Object();
query.term = "Soil";
//query.limit = 300;

//query.publishedStart = 2021
//query.publishedEnd = 2022

//query.dataCoverageStart = 2010
//query.dataCoverageEnd = 2019

//query.creatorName = 'Anderson'

//query.providerName = "EarthChem Library"
query.providerName = "HydroShare"

should = [];
if ("term" in query) {
  should.push({
              'text': {
                'query': query.term, 
                'path': [
                  'name', 'description', 'keywords'
                ], 
                'fuzzy': { 'maxEdits': 1 }
              }
            });
}

filters = [];
if ('publishedStart' in query) {
  filters.push({
              'range': {
                'path': "datePublished",
                'gte': new Date(query.publishedStart.toString()),
                'lt': new Date((query.publishedEnd + 1).toString()) // +1 to include all of the publishedEnd year
              },
            });
}

if ('dataCoverageStart' in query) {
  filters.push({
              'range': {
                'path': "temporalCoverage.start",
                'gte': new Date(query.dataCoverageStart.toString())
              },
            });
}


if ('dataCoverageEnd' in query) {
  filters.push({
              'range': {
                'path': "temporalCoverage.end",
                'lt': new Date((query.dataCoverageEnd + 1).toString()) // +1 to include all of the publishedEnd year
              },
            });
}

must = [];

if ('creatorName' in query) {
  must.push({
              'text': {
                'path': "creator.@list.name",
                'query': query.creatorName
              }
            });
}

if ('providerName' in query) {
  must.push({
              'text': {
                'path': "provider.name",
                'query': query.providerName
              }
            });
}

db.cznet.aggregate([
      {
        '$search': {
          'index': 'fuzzy_search',
          'compound': {
            'filter': filters,
            'should': should,
            'must': must
          },
          'highlight': { 'path': ['name', 'description', 'keywords'] }
        }
      },
      {
        '$limit': query.limit ? query.limit : 30
      },
      { 
        '$set': {
          'score': { '$meta': 'searchScore' },
          'highlights': { '$meta': 'searchHighlights' }
        } 
      },
      {
        '$sort': { 'score': { '$meta': 'textScore' } }
      }
    ]);
